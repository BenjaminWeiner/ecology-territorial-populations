(*
Returns steady states for many random communities across a range of tau_D, for the lattice territory model.

Specify lattice structure and presence/absence of oligotrophs on lines 13 and 16. To generate the data used in the figure, this must be run for all 6 combinationns 
of (linear, square, hexagonal) and (oligotrophs present, no oligotrophs present)


*)

Clear["Global`*"]; 

(*options: "linear", "square", hexagonal"*)
latticeStructure="linear";

(*options: "oligo", "noOligo"*)
oligoStatus="oligo";

precision = 30;
$MinPrecision = precision;


connectedC[\[Sigma]_] := Block[{(*myNeighbors,vars*)},
  (*given a species, 
  find its location in the spatial structure and return sum of \
connected Subscript[c, \[Sigma]i]*)
  
  myNeighbors = v[[\[Sigma]]];
  vars = ToExpression[
    Table["c" <> IntegerString[myNeighbors[[a]]], {a, 
      Length[myNeighbors]}]];
  Total[vars]
  
  ]

getCi[n_, nutrientIndex_] := 
 Block[{k, thisSupply, cVars, cSols, cSystem},
  
  thisSupply = s[[nutrientIndex]];
  (*index corresponds to species*)
  cVars = ToExpression[Table["c" <> IntegerString[k], {k, Length[n]}]];
  cSystem = 
   Table[cVars[[
      k]] == (thisSupply*n[[k]] + 
        d*connectedC[k])/(\[Alpha][[k, nutrientIndex]]*n[[k]] + 
        d*z), {k, Length[n]}];
  cSols = NSolve[cSystem, cVars] // Flatten;
  
  cVars /. cSols
  ]

dn[n_?(VectorQ[#, NumericQ] &)] := 
 Block[{(*nutrientIndex,cMatrix,growth*)},
  
  (*matrix of nutrient concentrations. Each row is a nutrient, 
  each column a species: p rows by m columns*)
  cMatrix = Table[getCi[n, nutrientIndex], {nutrientIndex, p}];
  
  (*for each species, sum over your column of the cMatrix*)
  growth = 
   Table[n[[sigma]]*
      Total[Table[\[Alpha][[sigma, nutrientIndex]]*
         cMatrix[[nutrientIndex, sigma]], {nutrientIndex, 
         p}]] - \[Delta]*n[[sigma]], {sigma, Length[n]}]
  ]




linearBasis = {{1, 0}, {-1, 0}};
squareBasis = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
hexagonalBasis = {{2/Sqrt[3], 0}, {-2/Sqrt[3], 0}, {1/Sqrt[3], 
    1}, {1/Sqrt[3], -1}, {-1/Sqrt[3], 1}, {-1/Sqrt[3], -1}};

(*return coordinates for linear network of m species. make sure you \
always assign sigma in increasing x,y*)
makeLinearSpace[numSpecies_] := Block[{coords},
   coords = Table[{i, 0}, {i, 0, numSpecies - 1}]
   
   ];

(*start from 0,0, increase in x then y*)
makeSquareSpace[numSpecies_] := Block[{i, j, coords},
  coords = 
   Flatten[Table[{j, i}, {i, 0, Sqrt[numSpecies] - 1}, {j, 0, 
      Sqrt[numSpecies] - 1}], 1]
  
  ]

makeHexagonalSpace[numSpecies_] := Block[{coords},
   coords = 
    Flatten[Table[{(j + Mod[i, 2]/2)*2/Sqrt[3], i}, {i, 0, 
       Sqrt[numSpecies] - 1}, {j, 0, Sqrt[numSpecies] - 1}], 1]
   ];

(*structure: (x,y), \[Sigma], list of neighbors. Only works for \
linear and square*)
getSpatialStructure[coords_, basis_, linearD_] := 
 Block[{structure, neighbors, i, j, trialNeighbor},
  structure = Table[{coords[[i]], i, -1}, {i, Length[coords]}];
  
  For[i = 1, i <= Length[structure], i++,
   neighbors = {};
   For[j = 1, j <= Length[basis], j++,
    trialNeighbor = structure[[i, 1]] + basis[[j]];
    If[trialNeighbor[[1]] < 0, trialNeighbor[[1]] = linearD - 1];
    If[trialNeighbor[[2]] < 0, trialNeighbor[[2]] = linearD - 1];
    If[trialNeighbor[[1]] > (linearD - 1), trialNeighbor[[1]] = 0];
    If[trialNeighbor[[2]] > (linearD - 1), trialNeighbor[[2]] = 0];
    neighbors = Join[neighbors, {trialNeighbor}];
    ];
   structure[[i, 3]] = neighbors;
   ];
  structure
  ]

(*works for 4 x 4*)
getHexagonalStructure[coords_, basis_] := 
 Block[{structure, neighbors, i, j, trialNeighbor},
  structure = Table[{coords[[i]], i, -1}, {i, Length[coords]}];
  maxX = Max[coords[[;; , 1]]];
  maxY = Max[coords[[;; , 2]]];
  
  
  For[i = 1, i <= Length[structure], i++,
   neighbors = {};
   For[j = 1, j <= Length[basis], j++,
    trialNeighbor = structure[[i, 1]] + basis[[j]];
    If[trialNeighbor[[1]] < 0, 
     trialNeighbor[[1]] = 
      maxX - (1/Sqrt[3]) + Mod[trialNeighbor[[2]], 2]/Sqrt[3]];
    If[trialNeighbor[[2]] < 0, trialNeighbor[[2]] = maxY];
    If[trialNeighbor[[1]] > maxX, 
     trialNeighbor[[1]] = Mod[trialNeighbor[[2]], 2]/Sqrt[3]];
    If[trialNeighbor[[2]] > maxY, trialNeighbor[[2]] = 0];
    neighbors = Join[neighbors, {trialNeighbor}];
    ];
   structure[[i, 3]] = neighbors;
   ];
  structure
  ]

(*now that you've assembled spatial structure, find the neighbors of \
each species*)
getNeighborVectors[structure_] := 
 Block[{i, j, numSpecies, myConnectivity, myStructureIndex, 
   neighboringSites, neighborStructureIndex, connectivity},
  numSpecies = Length[structure];
  connectivity = ConstantArray[-1, numSpecies];
  For[i = 1, i <= numSpecies, i++,
   myConnectivity = {};
   myStructureIndex = Position[structure[[;; , 2]], i][[1, 1]];
   neighboringSites = structure[[myStructureIndex, 3]];
   For[j = 1, j <= Length[neighboringSites], j++,
    neighborStructureIndex = 
     Position[structure[[;; , 1]], 
       x_List /; x == neighboringSites[[j]]][[1, 1]];
    myConnectivity = 
     Join[myConnectivity, {structure[[neighborStructureIndex, 2]]}];
    ];
   connectivity[[i]] = myConnectivity;
   ];
  connectivity
  ]



supply = 1;  (*total nutrient supply*)
\[Delta] = supply;
e = 1;             (* total enzyme budget*)
steps = 10^10;
s1 = 0.4;
s2 = supply - s1;
s = {s1, s2};
p=Length[s];
numStrats = 300;
m = 16;


epsilonSet = {{40, 1}, {30, 1}, {20, 1}, {15, 1}, {10, 1}, {7, 1}, {Sqrt[10],
    1}, {1, 1}, {1, 100}} ;(*(L,D*)
alphas = Table[RandomReal[1, m], {i, numStrats}];


(*eliminate oligotrophs*)
If[oligoStatus=="noOligo",
	For[index=1,index\[LessEqual]Length[alphas],index++,
	If[alphas[[index]]>s[[1]]&&alphas[[index]]<0.5,
	stillSearching=True;
	While[stillSearching,
	newStrat=RandomReal[{0,1}];
	If[newStrat<s[[1]]||newStrat>0.5,alphas[[index]]=newStrat;\
	stillSearching=False]

	];
	];
	]
	];


(*linear*)

If[latticeStructure=="linear",
coordinates = makeLinearSpace[m];
spatialStructure = getSpatialStructure[coordinates, linearBasis, m];]

(*square*)
If[latticeStructure=="square",
coordinates=makeSquareSpace[m];
spatialStructure=getSpatialStructure[coordinates,squareBasis,Sqrt[m]];]

 
 (*hexagonal*)
If[latticeStructure=="hexagonal",
coordinates=makeHexagonalSpace[m];
spatialStructure=getHexagonalStructure[coordinates,hexagonalBasis];]

v = getNeighborVectors[spatialStructure];
z = Length[v[[1]]];


filename=latticeStructure<>"_"<>oligoStatus;

Export["lDiversity_s1pt4_"<>filename<>"_epsilonSet.mx", epsilonSet];
Export["lDiversity_s1pt4_"<>filename<>"_strats.mx", alphas];


allFixedPoints = ConstantArray[0, numStrats];
SetSharedVariable[allFixedPoints];

ParallelDo[
  l = epsilonSet[[1, 1]];
  d = epsilonSet[[1, 2]];
  nInit = l*ConstantArray[1/m, m];
  theseAlphas = alphas[[i]]; 
  \[Alpha] = 
   Table[{theseAlphas[[k]], e - theseAlphas[[k]]}, {k, 
     Length[theseAlphas]}];
  
  testSol = 
   TimeConstrained[
    NDSolveValue[{n'[t] == dn[n[t]], n[0] == nInit}, 
     n, {t, 0, steps}, 
     Method -> {"EventLocator", "Event" -> Norm[n'[t]] < 10^-11}], 
    300, -1];   (*returns either a solution, overtime condition, 
  or failure to converge error*)
  
  testFP = testSol[testSol["Domain"][[1, 2]]]; msg = $MessageList;
  (*returns either the answer, 
  a warning about extrapolation if convergence fails, 
  or a part spec error for timeout*)
  
  If[Length[msg] == 0,
   (*If and only if high L worked out!*)
   	thisAlphaFP = ConstantArray[0, Length[epsilonSet]];
   	thisAlphaFP[[1]] = testFP;
   	For[j = 2, j <= Length[epsilonSet], j++,
    
    	l = epsilonSet[[j, 1]];
    	d = epsilonSet[[j, 2]];
    	nInit = l*ConstantArray[1/m, m];
    
    	(*continue to steps or fixed point*)
    	sol = 
     NDSolveValue[{n'[t] == dn[n[t]], n[0] == nInit}, 
      n, {t, 0, steps}, 
      Method -> {"EventLocator", "Event" -> Norm[n'[t]] < 10^-11}];
    	thisFP = sol[sol["Domain"][[1, 2]]];
    
    	thisAlphaFP[[j]] = thisFP;
    
    	];
   
    	
    (*save this strats FP data to mast list*)	
   	allFixedPoints[[i]] = thisAlphaFP;
   , allFixedPoints[[i]] = -1;
   ];
  , {i, numStrats}
  ];

Export["lDiversity_s1pt4_"<>filename<>"_allFP.mx", allFixedPoints];
